import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import os
import json
import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token from environment variables
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8165148442:AAHz3JwL6VlKk-n9yrKe5i1ZU7-89IWwgEk")

# Payment links
PAYMENT_LINK = "https://artemtraining.wayforpay.link/"
PRO_PAYMENT_LINK = "https://secure.wayforpay.com/button/bd9b9ffbb15af"

# Admin IDs
ADMIN_IDS = [609094231, 5153484824, 254322794]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_DATA_FILE = "interested_users.json"

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –±—Ä–æ–∞–¥–∫–∞—Å—Ç–∞
PHONE, PROCESSING, BROADCAST_TARGET, BROADCAST_CONTENT_TYPE, BROADCAST_TEXT, BROADCAST_PHOTO, BROADCAST_VIDEO, BROADCAST_CONFIRM, BROADCAST_CANCEL_CONFIRM = range(9)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ID —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
VIDEO_FILE_IDS = {
    "intro": "DQACAgIAAxkDAAIHM2fhRrRivkQWj4EqXRG60qnwYOjmAALBawACGrDwSnwzTaa6iXcONgQ",
    "more_info": "BAACAgIAAxkDAAIHP2fhWP0dZ8hfIBM5iGRcd8y2V_H8AAJIbAACGrDwSqqJk01KATMBNgQ",
    "training_info": "BAACAgIAAxkBAAINvmfoNgjnyesZybpfPCm_M6TkLNT5AAJLbAACGrDwSjmELCKJaJSlNgQ",
    "separate_testimonial": "BAACAgIAAxkBAAILE2flay-QCrsOKkuM-_BQZOYOztcZAAKNbgACFssIS7BMtu3oly_hNgQ",
    "course_completed": "DQACAgIAAxkBAAIO1WfpQQ_01JGQf2xv2DCzDhZ4O_NRAAIOZwACZvhAS_n9NqLItgg8NgQ"
}

DOCUMENT_FILE_IDS = [
    "BQACAgIAAxkDAAIHSmfhsDP9yNvalTqbv_yahB8qg70DAAKoOAACIyr5SPF0JlVT-_KTNgQ",
    "BQACAgIAAxkDAAIHS2fhsDMeV3NdGyAN41T13gs0Ez_fAAKqOAACIyr5SFW-Yqpy5UJ-NgQ",
    "BQACAgIAAxkDAAIHTGfhsDNV32a6M-err6FDujr0PKPpAAIjOQACIyr5SEKR7yUVbteoNgQ"
]

TESTIMONIAL_FILE_IDS = [
    "BAACAgIAAxkBAAIHWGfimLuI5nveS9A6qIGZ_yUg9yNjAAJgbQACpkAISxOBJPtS2rasNgQ",
    "BAACAgIAAxkDAAIHKmfhRoxkHbET16Q2mgN4Rc0p8ZydAAIBigACSB3QSjYVrKeUJHeCNgQ",
    "DQACAgIAAxkDAAIHT2fhsDn-fiMKvScGiLhjgWxjrBr5AALZZQACQDLISqIU-Nfd0z42NgQ",
    "BAACAgIAAxkDAAIHO2fhWPNfRh-Q3SFovoTLQ1O_arrEAAKFbgAClDjgSspPuuTGWSK_NgQ",
    "DQACAgIAAxkDAAIHLmfhRrA8alrwMWc8eFediqUV_-dRAAKsXwACnszISqQcU06eoadsNgQ"
]

TESTIMONIAL_DOUBLE_FILE_IDS = [
    "DQACAgIAAxkDAAIHMGfhRrK_8DlNhM2YiX1CvpiIBbroAAIJZwACwIbZSjDJUh6dGn4ZNgQ",
    "DQACAgIAAxkDAAIHMWfhRrJ82ZjT5hENGs2_OcZ4ho1cAALWawACVarwSgjASsIMjRh1NgQ"
]

TESTIMONIAL_TRIPLE_FILE_IDS = [
    "DQACAgIAAxkBAAISQWfq7Ta78Zh_8rm08qNIaBlzdl2VAAKZcwAC-W0JSxSwDHYFHMNoNgQ",
    "DQACAgIAAxkBAAISQ2fq7Xv5l8iy0-x8YrkXYl3rFVzvAALYcwAC-W0JS0HCK9sYxp08NgQ",
    "DQACAgIAAxkBAAISRWfq7b34Gv37xlDHYIbeTw5-2bDCAAIMdAAC-W0JS-PZwMZAnlESNgQ"
]

AGENT_VIDEO_IDS = [
    "DQACAgIAAxkBAAIH_GfkLfrlIbR0K_ohh7jZfhT8lYCVAAJ7ZAAC__cIS41AF8pr7dCnNgQ",
    "DQACAgIAAxkBAAIJmGflM_5OWzi32UkjhLaF7YjlwLSHAAKDZAAC__cIS5gP4vSrYqYLNgQ",
    "DQACAgIAAxkBAAIJmWflM_6PBymrXmh122qyUVmDJCIQAAKRZAAC__cIS3Rye3pphwABkDYE",
    "DQACAgIAAxkBAAIJmmflM_71YDr49u84_KKlGBak8UiMAAKXZAAC__cIS07rF5wdaU6XNgQ",
    "DQACAgIAAxkBAAIJnGflM_4LA8hThVMBeMNsdFZLHqwnAAJLZQAC__cISytJ4FdaBtuvNgQ",
    "DQACAgIAAxkBAAIJm2flM_6ME9J-vwgla9m8IZQBNnUtAAIqZQAC__cISwLqWAkokY6TNgQ",
    "DQACAgIAAxkBAAIJnWflM_7vKUx3_4UmTMutJFRLYWyxAAJaZQAC__cIS0RvcpZXvKvUNgQ",
    "DQACAgIAAxkBAAIJnmflM_7j3AvErwjZQEYaL_bnU4cwAAJlZQAC__cIS48bt-SP_5SZNgQ",
    "DQACAgIAAxkBAAIJn2flM_5rwGYvZHVRey3pBrCYDhbbAAJuZQAC__cISxA-_nK7KCGzNgQ",
    "DQACAgIAAxkBAAIJoGflM_7RsoD5XX9h2TXHaoZwrQvGAAJzZQAC__cISwABT3xwkpajsjYE",
    "DQACAgIAAxkBAAIJoWflM_5RWTnAXBiZ3UxRd3kmI-NgAAJ3ZQAC__cISzr6TJiSQ7m0NgQ"
]

AGENT_DESCRIPTIONS = [
    "üîπ –î—ñ–ª–∏–º–æ—Å—å –¥–æ—Å–≤—ñ–¥–æ–º:\n"
    "üí∏ –ú–∏ –ø—Ä–æ–π—à–ª–∏ —à–ª—è—Ö —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –≤—Ç—Ä–∞—Ç–∏–ª–∏ $200 000+,\n"
    "—â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —è–∫ —É—Å–µ –ø—Ä–∞—Ü—é—î.\n\n"
    "üéì –¢–µ–ø–µ—Ä —Ü–µ–π –¥–æ—Å–≤—ñ–¥ ‚Äî –¥–ª—è –≤–∞—Å,\n"
    "—â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —á—É–∂–∏—Ö –ø–æ–º–∏–ª–æ–∫, –∞ –æ–¥—Ä–∞–∑—É —Ä–æ—Å—Ç–∏!",
    
    "üîπ –¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ + –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥:\n"
    "üåç –î–æ—Å—Ç—É–ø –¥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–∞ —î–≤—Ä–æ–ø–µ–π—Å—å–∫–∏—Ö —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤\n"
    "‚úàÔ∏è –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–æ –≤—Å—å–æ–º—É —Å–≤—ñ—Ç—É\n"
    "ü§ù –†–æ–±–æ—Ç–∞ –∑ —î–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–º–∏ —Ç—É—Ä–∏—Å—Ç–∞–º–∏ –Ω–∞ –≤–∏–≥—ñ–¥–Ω–∏—Ö —É–º–æ–≤–∞—Ö\n"
    "üìö –£—Ä–æ–∫–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É ‚Äî —è–∫ –∑–∞–ª—É—á–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ",
    
    "üîπ –†–æ–±–æ—Ç–∞ –±–µ–∑ –≤–∫–ª–∞–¥–µ–Ω—å:\n"
    "üß† –ù–∞–≤—á–∞—î–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä—ñ—é\n"
    "üõ† –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ ‚Äî –±–µ–∑ –≤–∏—Ç—Ä–∞—Ç\n"
    "üéØ –¶—ñ–Ω–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –∫—É—Ä—Å—É –≤–∫–ª—é—á–µ–Ω–∞ –≤ –±–∞–∑–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É",
    
    "üîπ –Æ—Ä–∏–¥–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è + –¢—Ä–µ–Ω–¥–∏:\n"
    "‚öñÔ∏è –ü–æ–∫—Ä–æ–∫–æ–≤–æ —Ä–æ–∑–±–µ—Ä–µ–º–æ —é—Ä–∏–¥–∏—á–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏\n"
    "‚úÖ –Ø–∫ –≤–µ—Å—Ç–∏ –±—ñ–∑–Ω–µ—Å –ª–µ–≥–∞–ª—å–Ω–æ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ\n"
    "üìà –í—Ä–∞—Ö–æ–≤—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ –∑–º—ñ–Ω–∏ –Ω–∞ —Ä–∏–Ω–∫—É",
    
    "üîπ –û—Ñ–ª–∞–π–Ω —Ä–µ–∫–ª–∞–º–Ω—ñ —Ç—É—Ä–∏:\n"
    "üß≥ –î–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤ ‚Äî —É—á–∞—Å—Ç—å –≤ —Ç—É—Ä–∞—Ö\n"
    "üè® –î–æ 80 –≥–æ—Ç–µ–ª—ñ–≤ –∑–∞ –æ–¥–Ω—É –ø–æ—ó–∑–¥–∫—É\n"
    "üõ† –û—Ç—Ä–∏–º–∞—î—à –≤—Å—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏",
    
    "üîπ –ì–æ—Ç–µ–ª—ñ + –ù–∞–≤—á–∞–Ω–Ω—è:\n"
    "üè® –î–æ—Å—Ç—É–ø –¥–æ –≥–æ—Ç–µ–ª—å–Ω–æ—ó –±–∞–∑–∏ (–µ–∫–æ–Ω–æ–º / —Å—Ç–∞–Ω–¥–∞—Ä—Ç / –ø—Ä–µ–º—ñ—É–º)\n"
    "ü§ù –ì—Ä—É–ø–∞ –∞–≥–µ–Ω—Ç—ñ–≤ –¥–ª—è –æ–±–º—ñ–Ω—É –¥–æ—Å–≤—ñ–¥–æ–º\n"
    "üé• –í—ñ–¥–µ–æ—É—Ä–æ–∫–∏ + –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ —â–æ–¥–æ –æ–Ω–ª–∞–π–Ω —Ä–µ–∫–ª–∞–º–Ω–∏—Ö —Ç—É—Ä—ñ–≤\n"
    "üó∫ –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –Ω–∞–ø—Ä—è–º–∫—ñ–≤",
    
    "üîπ –†–æ–∑—à–∏—Ä–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n"
    "üè® –î–æ—Å—Ç—É–ø –¥–æ –≥–æ—Ç–µ–ª—å—î—Ä—ñ–≤\n"
    "üìß –†–æ–±–æ—á–∞ –ø–æ—à—Ç–∞ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
    "üöñ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–µ –ø–æ—Å–µ–ª–µ–Ω–Ω—è, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏, –∞–≤—ñ–∞ —Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n"
    "üîù –í—Å–µ –¥–ª—è –∑—Ä—É—á–Ω–æ—ó –π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç–∞",
    
    "üîπ –°—Ç–∞—Ä—Ç—É–π –∑–∞—Ä–∞–∑:\n"
    "üí∂ –í—Å—å–æ–≥–æ 9 —î–≤—Ä–æ ‚Äî —ñ —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à\n"
    "üìö –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –±–∞–∑–∏\n\n"
    "üöÄ –ü–æ—á–Ω–∏ —Å–≤—ñ–π —à–ª—è—Ö —É–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ!",
    
    "üîπ –ì–Ω—É—á–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–≤—á–∞–Ω–Ω—è:\n"
    "‚è∞ –ü—Ä–æ—Ö–æ–¥—å –∫—É—Ä—Å —É –∑—Ä—É—á–Ω–∏–π —á–∞—Å\n"
    "üåç –ü—Ä–∞—Ü—é—î –≤ –±—É–¥—å-—è–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ\n"
    "üì© –ù–æ–≤—ñ —É—Ä–æ–∫–∏ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Ç–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ",
    
    "üîπ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∞:\n"
    "üë• 700+ –∞–≥–µ–Ω—Ç—ñ–≤ –≤–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –∑ –ø–æ–≤–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º\n"
    "ü§ù –ó–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É ‚Äî –æ—Å–æ–±–∏—Å—Ç–æ –ø—ñ–¥—Ç—Ä–∏–º—É—é –∫–æ–∂–Ω–æ–≥–æ\n"
    "‚ù§Ô∏è –Ø –∂–∏–≤—É —Ü—ñ—î—é —Å–ø—Ä–∞–≤–æ—é ‚Äî —ñ —Ç–∏ —Å—Ç–∞–Ω–µ—à —á–∞—Å—Ç–∏–Ω–æ—é —á–æ–≥–æ—Å—å –±—ñ–ª—å—à–æ–≥–æ",
    
    "üîπ –Ñ–¥–∏–Ω–∞ —É —Å–≤—ñ—Ç—ñ —Å–∏—Å—Ç–µ–º–∞:\n"
    "üåç –ñ–æ–¥–Ω–∞ –∫—Ä–∞—ó–Ω–∞ –Ω–µ –¥–∞—î –∞–≥–µ–Ω—Ç–∞–º –¥–æ—Å—Ç—É–ø –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —Å—É—Å—ñ–¥—ñ–≤\n"
    "üöÄ –¢—ñ–ª—å–∫–∏ —É –Ω–∞—Å ‚Äî —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —ñ —Ä–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤–∞–≥–∞"
]

COURSE_CIRCLE_VIDEO_IDS = [
    "DQACAgIAAxkBAAIIVGfkfSw9DRCLhuYDlyaD_B2paQOgAAKLbAACt4kgSxAFrzCBlGhRNgQ",
    "DQACAgIAAxkBAAIJkmflMKduFuZADf3SAAG3lTtyMeN4-wACm2wAAreJIEsSi8dcI9VS5DYE",
    "DQACAgIAAxkBAAIJYWflI39WeiGlWVUT0HXyv7o8qTLBAAKcbAACt4kgSwu47maxutHqNgQ",
    "DQACAgIAAxkBAAIJlWflMotlTylNMuJc-k3FP0zcN_V1AAKmbAACt4kgS9LRJlVLOomfNgQ",
    "DQACAgIAAxkBAAIH92fkKwzpiOgD0sMKP8QwmE9bzalcAAKfbAACt4kgS73Aqchf7HvuNgQ"
]

COURSE_CIRCLE_DESCRIPTIONS = [
    "üîπ –¢—É—Ä–ê–≥–µ–Ω—Ç–∞–º ‚Äî —à–≤–∏–¥–∫–æ —Ç–∞ –≤–∏–≥—ñ–¥–Ω–æ:\n"
    "üè® –ü—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ \"Hotelston\"\n"
    "üí∏ –û–ø–ª–∞—Ç–∞ –≤ –≥—Ä–∏–≤–Ω—ñ –ø–æ –∫—É—Ä—Å—É –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É\n"
    "‚ùå –ë–µ–∑ SWIFT / –∫–æ–º—ñ—Å—ñ–π / –≤–∏—Ç—Ä–∞—Ç\n"
    "üîÅ –ú–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ 2-–π –∫–∞–±—ñ–Ω–µ—Ç —ñ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞—è–≤–∫–∏\n"
    "üí± –Ñ —Ä–∞—Ö—É–Ω–∫–∏ –≤ ‚Ç¨ / $ / ¬£ / z≈Ç\n\n"
    "üì≤ –ü–∏—à–∏ ‚Äî –ø—ñ–¥–∫–ª—é—á–∏–º–æ –∑–∞ 5 —Ö–≤!",
    
    "üîπ –ï–∫—Å–∫–ª—é–∑–∏–≤ –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤:\n"
    "üìë –î–æ–≥–æ–≤—ñ—Ä = –¥–æ—Å—Ç—É–ø –¥–æ:\n"
    "üá≤üá© –ú–æ–ª–¥–æ–≤—Å—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ (–∫–∞–±—ñ–Ω–µ—Ç–∏ + –≤–∏—Å–æ–∫–∞ –∫–æ–º—ñ—Å—ñ—è)\n"
    "üìû –ü—Ä—è–º–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏\n"
    "‚úàÔ∏è –ú–∏—Ç—Ç—î–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ‚Äî –æ–¥—Ä–∞–∑—É –≤ –≥–æ—Ç–µ–ª—å —ñ –Ω–∞ —Ä–µ–π—Å\n"
    "üéÅ –†–µ–∫–ª–∞–º–Ω—ñ —Ç—É—Ä–∏ –∑–∞ –ø—Ä–æ–¥–∞–∂–∞–º–∏\n"
    "‚≠êÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–æ:\n"
    "üáµüá± MerlinX (–ü–æ–ª—å—â–∞)\n"
    "üá®üáøüá©üá™üá±üáπüá±üáªüá™üá™ –û–ø–µ—Ä–∞—Ç–æ—Ä–∏ –ß–µ—Ö—ñ—ó, –ù—ñ–º–µ—á—á–∏–Ω–∏, –ë–∞–ª—Ç—ñ—ó\n"
    "üõ´ –ü—Ä—è–º–∞ —Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–≤—ñ–∞ + –æ–ø–ª–∞—Ç–∞ –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫",
    
    "üîπ –ü–æ–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤:\n"
    "üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞–≤—ñ—Ç—å –ª–æ—É–∫–æ—Å—Ç—ñ–≤ –∑ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É\n"
    "üïê –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7\n"
    "üè® –î–æ—Å—Ç—É–ø –¥–æ –≥–æ—Ç–µ–ª—å—î—Ä—ñ–≤, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É\n"
    "üìö 15 —Ä–æ–∫—ñ–≤ –Ω–∞–ø—Ä–∞—Ü—é–≤–∞–Ω—å ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –¥–æ—Å—Ç—É–ø\n"
    "üì¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ:\n"
    "‚Äì –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è —Å–æ—Ü–º–µ—Ä–µ–∂\n"
    "‚Äì –£—Ä–æ–∫–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É\n"
    "‚Äì –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ —è–∫ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫–∏",
    
    "üîπ –ö–∞–±—ñ–Ω–µ—Ç–∏ + —Å–≤–æ–±–æ–¥–∞ –≤–∏–±–æ—Ä—É:\n"
    "üßæ –ü—Ä—è–º—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—é –∫–æ–º—ñ—Å—ñ—î—é\n"
    "üîÅ –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º–∏\n"
    "üíº –ú–æ–∂–Ω–∞ –º–∞—Ç–∏ 2 –∞–∫—Ç–∏–≤–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ ‚Äî –±—Ä–æ–Ω—é–π—Ç–µ —Ç–∞–º, –¥–µ –≤–∏–≥—ñ–¥–Ω–æ\n"
    "‚ùå –ñ–æ–¥–Ω–∏—Ö –∑–æ–±–æ–≤'—è–∑–∞–Ω—å —á–∏ –ø–ª–∞–Ω—ñ–≤\n"
    "‚ö°Ô∏è –î–æ–≥–æ–≤—ñ—Ä –æ–Ω–ª–∞–π–Ω ‚Äî –¥–æ—Å—Ç—É–ø–∏ –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω\n"
    "üìû –ó–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É, –≥–æ—Ç–æ–≤—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏",
    
    "üîπ –û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–∫—Ç–∏ –ø—Ä–æ –Ω–∞—Å:\n"
    "üë• 700+ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤\n"
    "–ö–æ–∂–µ–Ω —â–æ—Ç–∏–∂–Ω—è —Å—Ç–≤–æ—Ä—é—î –º—ñ–Ω—ñ–º—É–º 1 –∑–∞—è–≤–∫—É\n"
    "üë®‚Äçüíº –ó–∞—Å–Ω–æ–≤–Ω–∏–∫ ‚Äî –ê—Ä—Ç–µ–º –ö–æ–∑–ª–æ–≤—Å—å–∫–∏–π\n"
    "–û–ø–µ—Ä–∞—Ç–æ—Ä \"–ö–ª—É–± –î–∞—Ç—É—Ä\":\n"
    "—î–≤—Ä–æ–ø–µ–π—Å—å–∫—ñ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–∏, –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –∞–≤—ñ–∞–∫–≤–∏—Ç–∫–∏\n"
    "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–∞ –≤—ñ–¥–≥—É–∫–∏\n"
    "–î–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É ‚Äî –≤—Å–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ\n"
    "üì≤ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7\n"
    "–û—Å–æ–±–∏—Å—Ç—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤—ñ–¥ –ê—Ä—Ç–µ–º–∞ ‚Äî –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É"
]

AGENT_TESTIMONIAL_VIDEO_IDS = [
    # –ü–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ - –¥–≤–∞ –≤–∏–¥–µ–æ
    ["DQACAgIAAxkBAAIRCmfqorDyfxKVU5rHmlBHv3tpjfztAALVZQACQDLISvAffcB02YGPNgQ", 
     "DQACAgIAAxkDAAINvWfoNTMjJkZXyqkHNN0HUWSxTj57AALZZQACQDLISqIU-Nfd0z42NgQ"],
    
    # –í—Ç–æ—Ä–æ–π –æ—Ç–∑—ã–≤ - —Ç—Ä–∏ –≤–∏–¥–µ–æ
    ["DQACAgIAAxkDAAIQCmfpto4RMJYMIcDsZw6cxBsrMhcDAAIJZwACwIbZSjDJUh6dGn4ZNgQ", 
     "DQACAgIAAxkDAAIQC2fpto4shW4776XKBAv8FXEbOsdgAALWawACVarwSgjASsIMjRh1NgQ", 
     "DQACAgIAAxkBAAIRFWfqpgABHsfGzJSEuY32tXSH_huC8QAC22sAAlWq8EpCPa475G6r8zYE"],
    
    # –¢—Ä–µ—Ç–∏–π –æ—Ç–∑—ã–≤ - –æ–¥–Ω–æ –≤–∏–¥–µ–æ
    ["DQACAgIAAxkBAAIRFmfqqJZOv-VA2M6ItMvrVS5xKBTcAALbawAC9k8AAUvoIb_OvatZsjYE"],
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –æ—Ç–∑—ã–≤ - –æ–¥–Ω–æ –≤–∏–¥–µ–æ
    ["BAACAgIAAxkBAAIRF2fqqPV-O-nK1y9ijXhmPTwBZEKpAAKnaQACTSxQS1OWiyqmkGIrNgQ"],
    
    # –ü—è—Ç—ã–π –æ—Ç–∑—ã–≤ - –æ–¥–Ω–æ –≤–∏–¥–µ–æ
    ["BAACAgIAAxkDAAINlmfnzkEE9WJLxBNWBr5KwzgfFJ6RAAJgbQACpkAISxOBJPtS2rasNgQ"],
    
    # –®–µ—Å—Ç–æ–π –æ—Ç–∑—ã–≤ - –æ–¥–Ω–æ –≤–∏–¥–µ–æ
    ["BAACAgIAAxkDAAINvGfoNTIO_5wuJ41BlKXJ0gMje3CNAAIBigACSB3QSjYVrKeUJHeCNgQ"],
    
    # –°–µ–¥—å–º–æ–π –æ—Ç–∑—ã–≤ - –æ–¥–Ω–æ –≤–∏–¥–µ–æ
    ["BAACAgIAAxkBAAIRGmfqqcHig8eV_D7ROzgqwx07c_ZqAAI2igACSB3QSofQW4dqRDluNgQ"]
]

CONTRACT_DOCUMENT_IDS = [
    "BQACAgIAAxkBAAIRHWfqqy9hrywWrhCcfibLSwkbBq6xAAK6agACgd_oSazbOVn09RIeNgQ",
    "BQACAgIAAxkBAAIRHmfqq13sfpPKd5Drg-FFwpKLBVOwAAK8agACgd_oSXsIEqtxtkeMNgQ"
]

COURSE_VIDEOS = [
    "https://youtu.be/1DyL0Txsh8k",
    "https://youtu.be/uE6cQdWZ01c",
    "https://youtube.com/live/OiXIEahO0po",
    "https://youtube.com/live/Avgd3udJHhg",
    "https://youtu.be/qaxO-fpTt64"
]

PRO_COURSE_VIDEOS = [
    "https://youtu.be/FBUkIORHqn8",
    "https://youtube.com/live/6AiZyPOuGHs",
    "https://youtube.com/live/ngpa0FRKMtE?feature=share",
    "https://youtu.be/DaEmrv2nZkg",
    "https://youtu.be/sXKcLj2Zf1A?si=osyIP_tA5tkDhKN6",
    "https://www.youtube.com/live/ap3oqMGCtz4?si=CVw2xN2z4lr5Izd3",
    "https://youtube.com/live/xxmkf_UCq2M?feature=share",
    "https://youtube.com/live/V1DBEc1hIZI?feature=share",
    "https://youtu.be/URKJAFGZ950",
    "https://www.youtube.com/watch?v=TP1g25v6XK4",
    "https://youtube.com/live/5KY-Hi6hkhQ"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data(user_id, username, phone, timestamp, action_type=None, course_type=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON-—Ñ–∞–π–ª.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        timestamp: –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ("hotel_selection", "request_contact" –∏–ª–∏ None)
        course_type: –¢–∏–ø –∫—É—Ä—Å–∞ ("basic", "pro" –∏–ª–∏ None)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç
        if not os.path.exists(USERS_DATA_FILE):
            with open(USERS_DATA_FILE, 'w') as f:
                json.dump([], f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        with open(USERS_DATA_FILE, 'r') as f:
            users_data = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "id": user_id,
            "username": username if username else "No username",
            "phone": phone,
            "timestamp": timestamp,
            "action_type": action_type,  # "hotel_selection", "request_contact" –∏–ª–∏ None
            "course_type": course_type   # "basic", "pro" –∏–ª–∏ None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_exists = False
        for user in users_data:
            if user["id"] == user_id:
                user_exists = True
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–µ—Ç
                if action_type is not None:
                    user["action_type"] = action_type
                if course_type is not None:
                    user["course_type"] = course_type
                if phone != "–ù–µ —É–∫–∞–∑–∞–Ω":
                    user["phone"] = phone
                user["timestamp"] = timestamp
                break
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if not user_exists:
            users_data.append(user_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(USERS_DATA_FILE, 'w') as f:
            json.dump(users_data, f, indent=4)
            
        return True
    except Exception as e:
        logger.error(f"Error saving user data: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users_data():
    try:
        if not os.path.exists(USERS_DATA_FILE):
            return []
        
        with open(USERS_DATA_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Error loading users data: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in ADMIN_IDS

# 1. –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback=False) -> None:
    """Send a message when the command /start is issued."""
    
    # Check if this is a payment confirmation with start=money
    if hasattr(context, 'args') and context.args and context.args[0] == "money":
        await payment_confirmation(update, context)
        return
    
    # Check if this is a Pro payment confirmation with start=money1
    if hasattr(context, 'args') and context.args and context.args[0] == "money1":
        await pro_payment_confirmation(update, context)
        return
    
    # 1.1 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    try:
        if is_callback:
            # –ï—Å–ª–∏ —ç—Ç–æ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_video —Å query.message
            await update.callback_query.message.reply_video(
                video=VIDEO_FILE_IDS["intro"]
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π reply_video
            await update.message.reply_video(
                video=VIDEO_FILE_IDS["intro"]
            )
    except Exception as e:
        logger.error(f"Error sending intro video: {e}")
        if is_callback:
            await update.callback_query.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    # 1.2 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –•–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", callback_data="more_info")],
        [InlineKeyboardButton("üìù –í—ñ–¥–≥—É–∫–∏", callback_data="testimonials"),
         InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏", callback_data="documents")],
        [InlineKeyboardButton("‚ùì –ü—Ä–æ —â–æ —Ü–µ–π –∫—É—Ä—Å", callback_data="about_course")],
        [InlineKeyboardButton("üéÅ –ï–∫—Å–∫–ª—é–∑–∏–≤ –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤‚ú®", callback_data="i_am_agent")],
        [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    welcome_text = (
        "‚ú® –ü—Ä–∏–≤—ñ—Ç, –¥—Ä—É–∑—ñ! ‚ú®\n"
        "üöÄ –°—Ç–≤–æ—Ä–∏–ª–∏ –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ —Ä–∏–Ω–∫—É, —è–∫–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑–∞ 3 –¥–Ω—ñ –ø–æ—á–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ —ñ –∑–∞—Ä–æ–±–ª—è—Ç–∏ –≤—ñ–¥ 500 ‚Ç¨! üåü\n\n"
        "üôå –†–∞–¥–∏–π –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —Ç—É—Ç!\n"
        "üë§ –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ê—Ä—Ç–µ–º –ö–æ–∑–ª–æ–≤—Å—å–∫–∏–π ‚Äî –∑–∞—Å–Ω–æ–≤–Ω–∏–∫ –æ–¥–Ω—ñ—î—ó –∑ –Ω–∞–π–±—ñ–ª—å—à–∏—Ö —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π –≤ –£–∫—Ä–∞—ó–Ω—ñ ‚Äî Enjoy the World (—é—Ä–∏–¥–∏—á–Ω–æ ‚Äî –ö–ª—É–± –î–∞—Ç—É—Ä).\n\n"
        "üåü –©–æ –º–∏ –¥–∞—î–º–æ –∞–≥–µ–Ω—Ç–∞–º:\n"
        "‚úÖ –î–æ—Å—Ç—É–ø–∏ –¥–æ —î–≤—Ä–æ–ø–µ–π—Å—å–∫–∏—Ö —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö —Å–∏—Å—Ç–µ–º üåê\n"
        "‚úÖ –ú–∏—Ç—Ç—î–≤—ñ –≤–∞–ª—é—Ç–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ üí∂\n"
        "‚úÖ –ü—Ä—è–º—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ üìù\n"
        "‚úÖ –ù–∞–π–≤–∏–≥—ñ–¥–Ω—ñ—à—ñ % –Ω–∞ —Ä–∏–Ω–∫—É üí∏\n\n"
        "üìÇ –í—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—ó ‚Äî –Ω–∏–∂—á–µ\n"
        "üí¨ –í—ñ–¥–≥—É–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ –∫–æ–º–∞–Ω–¥–æ—é ‚Äî —Ç–∞–∫–æ–∂ –ø—ñ–¥ —Ü–∏–º –≤—ñ–¥–µ–æ\n\n"
        "üí™ –î—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É —Ç–∞ –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ —É —Å–≤—ñ—Ç—ñ —Ç—É—Ä–∏–∑–º—É! üíº‚úàÔ∏è"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_callback:
        await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# 2. –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ"
async def more_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle more info button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ 2.1
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíº –¶—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è", callback_data="training_info")],
        [InlineKeyboardButton("üìù –í—ñ–¥–≥—É–∫–∏", callback_data="testimonials")],
        [InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="social_media")],
        [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")],
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫—É—Ä—Å WayForPay", url=PAYMENT_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    try:
        await query.message.reply_video(
            video=VIDEO_FILE_IDS["more_info"],
            caption=(
                "üõ´ –ó–ª–µ—Ç–∞–π –¥–æ –º—Ä—ñ—ó —Ä–∞–∑–æ–º –∑ –Ω–∞–º–∏!\n\n"
                "üî• –©–æ —Ç–µ–±–µ —á–µ–∫–∞—î –≤ –∫—É—Ä—Å—ñ:\n"
                "üíé –í—Å—å–æ–≥–æ 9‚Ç¨ ‚Äî —ñ —Ç–∏ –≤–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ\n"
                "üíé –†–µ–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥ –∑ 15+ —Ä–æ–∫—ñ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
                "üíé –î–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤\n"
                "üíé –û—Å–æ–±–∏—Å—Ç—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ + –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–æ–º–∞–Ω–¥–∏\n"
                "üíé –ß–∞—Ç-–±–æ—Ç –∑ AI, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î 24/7\n"
                "üíé –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–¥–æ—Ä–æ–∂—É–≤–∞—Ç–∏, –∑–Ω—ñ–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —ñ –¥–∞—Ä—É–≤–∞—Ç–∏ –µ–º–æ—Ü—ñ—ó ‚ú®\n\n"
                "üöÄ –ü–æ—á–Ω–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ ‚Äî –∑—Ä–æ–±–∏ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ –Ω–æ–≤–æ—ó —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ!"
            ),
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error sending more_info video: {e}")
        await query.message.reply_text(
            "üõ´ –ó–ª–µ—Ç–∞–π –¥–æ –º—Ä—ñ—ó —Ä–∞–∑–æ–º –∑ –Ω–∞–º–∏!\n\n"
            "üî• –©–æ —Ç–µ–±–µ —á–µ–∫–∞—î –≤ –∫—É—Ä—Å—ñ:\n"
            "üíé –í—Å—å–æ–≥–æ 9‚Ç¨ ‚Äî —ñ —Ç–∏ –≤–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ\n"
            "üíé –†–µ–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥ –∑ 15+ —Ä–æ–∫—ñ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
            "üíé –î–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤\n"
            "üíé –û—Å–æ–±–∏—Å—Ç—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ + –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–æ–º–∞–Ω–¥–∏\n"
            "üíé –ß–∞—Ç-–±–æ—Ç –∑ AI, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î 24/7\n"
            "üíé –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–¥–æ—Ä–æ–∂—É–≤–∞—Ç–∏, –∑–Ω—ñ–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —ñ –¥–∞—Ä—É–≤–∞—Ç–∏ –µ–º–æ—Ü—ñ—ó ‚ú®\n\n"
            "üöÄ –ü–æ—á–Ω–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ ‚Äî –∑—Ä–æ–±–∏ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ –Ω–æ–≤–æ—ó —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ!",
            reply_markup=reply_markup
        )

# 3. –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ —â–æ —Ü–µ–π –∫—É—Ä—Å"
async def about_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle about course button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    context.user_data["agent_video_index"] = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    await send_agent_video(update, context)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
async def send_agent_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send agent video based on the current index."""
    query = update.callback_query
    index = context.user_data.get("agent_video_index", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
    if index >= len(AGENT_VIDEO_IDS):
        await query.message.reply_text("–í—Å—ñ –≤—ñ–¥–µ–æ –≤–∂–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    try:
        await query.message.reply_video(video=AGENT_VIDEO_IDS[index])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –û–¢–î–ï–õ–¨–ù–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        description = AGENT_DESCRIPTIONS[index]
        
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_agent_video")],
            [InlineKeyboardButton("üë®‚Äçüíº –•–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", callback_data="more_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(description, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error sending agent video: {e}")
        await query.message.reply_text(
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ" –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
async def next_agent_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle next agent video button press."""
    query = update.callback_query
    await query.answer()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    current_index = context.user_data.get("agent_video_index", 0)
    next_index = current_index + 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    context.user_data["agent_video_index"] = next_index
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
    await send_agent_video(update, context)

# 4. –ö–Ω–æ–ø–∫–∞ "–î–æ–∫—É–º–µ–Ω—Ç–∏"
async def documents(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle documents button press."""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for doc_id in DOCUMENT_FILE_IDS:
        try:
            await query.message.reply_document(document=doc_id)
        except Exception as e:
            logger.error(f"Error sending document: {e}")
            await query.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–≤—á–∞–Ω–Ω—è -> more_info (2.1)
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíº –ù–∞–≤—á–∞–Ω–Ω—è", callback_data="more_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–£—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—ó. –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )

# 5. –ö–Ω–æ–ø–∫–∞ "–í—ñ–¥–≥—É–∫–∏"
async def testimonials(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonials button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞
    context.user_data["testimonial_index"] = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await query.message.reply_text("üíô –¶—ñ–Ω—É—î–º–æ –≤—Å—ñ—Ö –Ω–∞—à–∏—Ö —É—á–Ω—ñ–≤! üíõ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
    await send_testimonial(update, context)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
async def send_testimonial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a testimonial based on the current index."""
    query = update.callback_query
    index = context.user_data.get("testimonial_index", 0)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç–∑—ã–≤–∞
    if index < 7:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ (–¥–ª—è –ø–µ—Ä–≤—ã—Ö 7 –æ—Ç–∑—ã–≤–æ–≤)
        keyboard = [
            [InlineKeyboardButton("üòä –ë—ñ–ª—å—à–µ –≤—ñ–¥–≥—É–∫—ñ–≤", callback_data=f"testimonial_{index+1}")],
            [InlineKeyboardButton("üë®‚Äçüíº –ù–∞–≤—á–∞–Ω–Ω—è", callback_data="more_info"),
             InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data="training_info")]
        ]
    else:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüíº –ù–∞–≤—á–∞–Ω–Ω—è", callback_data="more_info"),
             InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏", callback_data="training_info")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–∏–Ω–¥–µ–∫—Å—ã 0-4)
        if index < 5:
            await query.message.reply_video(
                video=TESTIMONIAL_FILE_IDS[index],
                reply_markup=reply_markup
            )
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ 6-–≥–æ –æ—Ç–∑—ã–≤–∞ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ)
        elif index == 5:
            await query.message.reply_video(
                video=VIDEO_FILE_IDS["separate_testimonial"],
                reply_markup=reply_markup
            )
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ 7-–≥–æ –æ—Ç–∑—ã–≤–∞ (–¥–≤–æ–π–Ω–æ–≥–æ)
        elif index == 6:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await query.message.reply_video(
                video=TESTIMONIAL_DOUBLE_FILE_IDS[0]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.message.reply_video(
                video=TESTIMONIAL_DOUBLE_FILE_IDS[1],
                reply_markup=reply_markup
            )
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ 8-–≥–æ –æ—Ç–∑—ã–≤–∞ (—Ç—Ä–æ–π–Ω–æ–≥–æ)
        elif index == 7:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await query.message.reply_video(
                video=TESTIMONIAL_TRIPLE_FILE_IDS[0]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await query.message.reply_video(
                video=TESTIMONIAL_TRIPLE_FILE_IDS[1]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å–µ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await query.message.reply_video(
                video=TESTIMONIAL_TRIPLE_FILE_IDS[2],
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error sending testimonial: {e}")
        await query.message.reply_text(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
async def testimonial_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonial_1 button press."""
    query = update.callback_query
    await query.answer()
    context.user_data["testimonial_index"] = 1
    await send_testimonial(update, context)

async def testimonial_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonial_2 button press."""
    query = update.callback_query
    await query.answer()
    context.user_data["testimonial_index"] = 2
    await send_testimonial(update, context)

async def testimonial_3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonial_3 button press."""
    query = update.callback_query
    await query.answer()
    context.user_data["testimonial_index"] = 3
    await send_testimonial(update, context)

async def testimonial_4(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonial_4 button press."""
    query = update.callback_query
    await query.answer()
    context.user_data["testimonial_index"] = 4
    await send_testimonial(update, context)

async def testimonial_5(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonial_5 button press."""
    query = update.callback_query
    await query.answer()
    context.user_data["testimonial_index"] = 5
    await send_testimonial(update, context)

async def testimonial_6(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonial_6 button press."""
    query = update.callback_query
    await query.answer()
    context.user_data["testimonial_index"] = 6
    await send_testimonial(update, context)

async def testimonial_7(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle testimonial_7 button press."""
    query = update.callback_query
    await query.answer()
    context.user_data["testimonial_index"] = 7
    await send_testimonial(update, context)

# 6. –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle ask question button press."""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫—É—Ä—Å –∞–±–æ —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏–π –±—ñ–∑–Ω–µ—Å.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –≤ —á–∞—Ç, —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ."
    )

# 7. –ö–Ω–æ–ø–∫–∞ "–¶—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è"
async def training_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle training info button press."""
    query = update.callback_query
    await query.answer()
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏ –∫—É—Ä—Å WayForPay", url=PAYMENT_LINK)],
        [InlineKeyboardButton("üìù –í—ñ–¥–≥—É–∫–∏", callback_data="testimonials"), 
         InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏", callback_data="documents")],
        [InlineKeyboardButton("‚ùì –ü—Ä–æ —â–æ —Ü–µ–π –∫—É—Ä—Å", callback_data="about_course")],
        [InlineKeyboardButton("üéÅ –ï–∫—Å–∫–ª—é–∑–∏–≤ –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤‚ú®", callback_data="i_am_agent")],
        [InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="social_media")],
        [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    caption = (
        "üß≥ –ì–æ—Ç–æ–≤—ñ –∑–º—ñ–Ω–∏—Ç–∏ —Å–≤–æ—î –∂–∏—Ç—Ç—è —á–µ—Ä–µ–∑ —Ç—É—Ä–∏–∑–º?\n\n"
        "üìå –©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏:\n"
        "üíé –ó—Ä—É—á–Ω–∞ –æ–ø–ª–∞—Ç–∞: Apple Pay, Google Pay, PayPal, Wise, Revolut, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n"
        "üíé –ú–∏—Ç—Ç—î–≤–∏–π –¥–æ—Å—Ç—É–ø –¥–æ Telegram-–∫–∞–Ω–∞–ª—É –∑ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º–∏ —É—Ä–æ–∫–∞–º–∏\n"
        "üíé –ù–∞–≤—á–∞–Ω–Ω—è:\n"
        "   ‚Äî –°–∏—Å—Ç–µ–º–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è üåê\n"
        "   ‚Äî –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç üì±\n"
        "   ‚Äî –î–æ—Å–≤—ñ–¥ 15+ —Ä–æ–∫—ñ–≤ –≤ –æ–¥–Ω—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ\n"
        "üíé –î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ –≤–∞–ª—é—Ç–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤\n"
        "üíé –ü–æ–Ω–∞–¥ 700 –∞–≥–µ–Ω—Ç—ñ–≤ –ø–æ –≤—Å—å–æ–º—É —Å–≤—ñ—Ç—É –≤–∂–µ –∑ –Ω–∞–º–∏\n"
        "üíé –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É üì∏\n\n"
        "üíº –¶–µ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∫—É—Ä—Å ‚Äî —Ü–µ –≤–∞—à –Ω–æ–≤–∏–π —Å—Ç–∞—Ä—Ç!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    try:
        await query.message.reply_video(
            video=VIDEO_FILE_IDS["training_info"],
            caption=caption,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error sending training_info video: {e}")
        await query.message.reply_text(
            caption,
            reply_markup=reply_markup
        )

# 8.1 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (—á–µ—Ä–µ–∑ /start money)
async def payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle payment confirmation."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
    user_id = update.effective_user.id
    username = update.effective_user.username
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_user_data(user_id, username, "–ù–µ —É–∫–∞–∑–∞–Ω", timestamp, course_type="basic")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É
    keyboard = [
        [InlineKeyboardButton("üìò –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –ø–æ–≤–Ω—ñ—Å—Ç—é", callback_data="full_course")],
        [InlineKeyboardButton("üìó –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç—É–ø–æ–≤–æ", callback_data="gradual_course")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await update.message.reply_text(
        "‚úÖ –í–∞—à –ø–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! üöÄ\n–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏:",
        reply_markup=reply_markup
    )

# 8.2 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã Pro –∫—É—Ä—Å–∞ (—á–µ—Ä–µ–∑ /start money1)
async def pro_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle Pro payment confirmation."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ Pro –∫—É—Ä—Å–∞
    user_id = update.effective_user.id
    username = update.effective_user.username
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_user_data(user_id, username, "–ù–µ —É–∫–∞–∑–∞–Ω", timestamp, course_type="pro")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Pro –∫—É—Ä—Å—É
    keyboard = [
        [InlineKeyboardButton("üìò –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –ø–æ–≤–Ω—ñ—Å—Ç—é", callback_data="pro_full_course")],
        [InlineKeyboardButton("üìó –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç—É–ø–æ–≤–æ", callback_data="pro_gradual_course")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ Pro –∫—É—Ä—Å–∞
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é, –≤–∏ –ø—Ä–∏–¥–±–∞–ª–∏ –∫—É—Ä—Å Pro",
        reply_markup=reply_markup
    )

# 8.3 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (—á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ)
async def payment_success(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle successful payment message."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
    user_id = update.effective_user.id
    username = update.effective_user.username
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_user_data(user_id, username, "–ù–µ —É–∫–∞–∑–∞–Ω", timestamp, course_type="basic")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É
    keyboard = [
        [InlineKeyboardButton("üìò –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –ø–æ–≤–Ω—ñ—Å—Ç—é", callback_data="full_course")],
        [InlineKeyboardButton("üìó –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç—É–ø–æ–≤–æ", callback_data="gradual_course")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await update.message.reply_text(
        "‚úÖ –í–∞—à –ø–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! üöÄ\n–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫ –≤–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏:",
        reply_markup=reply_markup
    )

# 9. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
async def full_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle full course access button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
    context.user_data["return_to_full_course"] = True
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–∏–¥–µ–æ
    course_text = (
        "–û—Å—å —Ç–≤—ñ–π –∫—É—Ä—Å üìò\n"
        "–¶—ñ 5 –≤—ñ–¥–µ–æ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è –≤ —É—Å—å–æ–º—É –∫—Ä–æ—Ü—ñ –∑–∞ –∫—Ä–æ–∫–æ–º. "
        "–ü–µ—Ä–µ–≥–ª—è–¥–∞–π —ó—Ö —É –∑—Ä—É—á–Ω–æ–º—É —Ç–µ–º–ø—ñ ‚Äî –≥–æ–ª–æ–≤–Ω–µ –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π —ñ –æ–¥—Ä–∞–∑—É –∑–∞—Å—Ç–æ—Å–æ–≤—É–π –∑–Ω–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ! ‚úè\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –≤–∏–¥–µ–æ
    for i, video_url in enumerate(COURSE_VIDEOS, 1):
        course_text += f"üìπ –í—ñ–¥–µ–æ {i}: {video_url}\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –ø—Ä–æ–π—à–æ–≤ / –ø—Ä–æ–π—à–ª–∞ –∫—É—Ä—Å", callback_data="course_completed")],
        [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")],
        [InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="social_media")],
        [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–µ–æ
    await query.message.reply_text(course_text, reply_markup=reply_markup)

# 10. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
async def gradual_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle gradual course access button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    context.user_data["video_index"] = 0
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ"
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_video")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ
    await query.message.reply_text(
        f"–ß—É–¥–æ–≤–æ, –¥–∞–≤–∞–π —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ –∫—É—Ä—Å –ø–æ—Å—Ç—É–ø–æ–≤–æ üìò\n"
        f"–û—Å—å —Ç–≤–æ—î –ø–µ—Ä—à–µ –≤—ñ–¥–µ–æ ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—å —É–≤–∞–∂–Ω–æ, —ñ —è–∫ —Ç—ñ–ª—å–∫–∏ –∑–∞–∫—ñ–Ω—á–∏—à, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É \"‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ\". "
        f"–£—Å—å–æ–≥–æ –±—É–¥–µ 5 –≤—ñ–¥–µ–æ, —Ç–æ–∂ —Ä—É—Ö–∞—î–º–æ—Å—è –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º üö∂ üö∂\n"
        f"üìπ –í—ñ–¥–µ–æ 1: {COURSE_VIDEOS[0]}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ" –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def next_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle next video button press."""
    query = update.callback_query
    await query.answer()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    current_index = context.user_data.get("video_index", 0)
    next_index = current_index + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
    if next_index >= len(COURSE_VIDEOS):
        await query.message.reply_text("–í—Å—ñ –≤—ñ–¥–µ–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
    context.user_data["video_index"] = next_index
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if next_index == 1:  # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = (
            f"üìπ –í—ñ–¥–µ–æ {next_index + 1}: {COURSE_VIDEOS[next_index]}\n\n"
            f"YouTube\n"
            f"–í—ñ–¥–µ–æ {next_index + 1}\n\n"
            f"#{next_index + 1}\n\n"
            f"üòå –í—Ç–æ–º–∏–≤—Å—è –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è? –ú–∏ –ø—ñ–¥–±–µ—Ä–µ–º–æ –¥–ª—è —Ç–µ–±–µ —ñ–¥–µ–∞–ª—å–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫! üå¥‚ú® –ü–∏—à–∏ –Ω–∞–º ‚Äì —ñ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—è! üí¨"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–±–æ—Ä –æ—Ç–µ–ª—è
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_video")],
            [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
        ]
    elif next_index == 3:  # –î–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –≤–∏–¥–µ–æ (–∏–Ω–¥–µ–∫—Å 3)
        text = (
            f"üìπ –í—ñ–¥–µ–æ {next_index + 1}: {COURSE_VIDEOS[next_index]}\n\n"
            f"YouTube\n"
            f"–í—ñ–¥–µ–æ {next_index + 1}\n\n"
            f"#{next_index + 1}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
        context.user_data["return_to_basic_course"] = True
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –≤–∏–¥–µ–æ
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_video")],
            [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")]
        ]
    else:
        text = (
            f"üìπ –í—ñ–¥–µ–æ {next_index + 1}: {COURSE_VIDEOS[next_index]}\n\n"
            f"YouTube\n"
            f"–í—ñ–¥–µ–æ {next_index + 1}\n\n"
            f"#{next_index + 1}"
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
        if next_index < len(COURSE_VIDEOS) - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_video")]
            ]
        else:  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
            context.user_data["return_to_basic_course"] = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–∏–¥–µ–æ
            keyboard = [
                [InlineKeyboardButton("‚úÖ –Ø –ø—Ä–æ–π—à–æ–≤ / –ø—Ä–æ–π—à–ª–∞ –∫—É—Ä—Å", callback_data="course_completed")],
                [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")],
                [InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="social_media")],
                [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
            ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    await query.message.reply_text(text, reply_markup=reply_markup)

# 11. –ü–æ–ª—É—á–µ–Ω–∏–µ Pro –∫—É—Ä—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
async def pro_full_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle Pro full course access button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
    context.user_data["return_to_pro_full_course"] = True
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–∏–¥–µ–æ
    course_text = (
        "–û—Å—å –≤–∞—à Pro –∫—É—Ä—Å üìò\n"
        "–¶—ñ 11 –≤—ñ–¥–µ–æ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è –≤ —É—Å—å–æ–º—É –∫—Ä–æ—Ü—ñ –∑–∞ –∫—Ä–æ–∫–æ–º. "
        "–ü–µ—Ä–µ–≥–ª—è–¥–∞–π —ó—Ö —É –∑—Ä—É—á–Ω–æ–º—É —Ç–µ–º–ø—ñ ‚Äî –≥–æ–ª–æ–≤–Ω–µ –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π —ñ –æ–¥—Ä–∞–∑—É –∑–∞—Å—Ç–æ—Å–æ–≤—É–π –∑–Ω–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ! ‚úè\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –≤–∏–¥–µ–æ
    for i, video_url in enumerate(PRO_COURSE_VIDEOS, 1):
        course_text += f"üìπ –í—ñ–¥–µ–æ {i}: {video_url}\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíº –¶—ñ–∫–∞–≤–∏—Ç—å —Å–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="request_contact")],
        [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")],
        [InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="social_media")],
        [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–µ–æ
    await query.message.reply_text(course_text, reply_markup=reply_markup)

# 12. –ü–æ–ª—É—á–µ–Ω–∏–µ Pro –∫—É—Ä—Å–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
async def pro_gradual_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle Pro gradual course access button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    context.user_data["pro_video_index"] = 0
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ"
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_pro_video")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ
    await query.message.reply_text(
        f"–ß—É–¥–æ–≤–æ, –¥–∞–≤–∞–π —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ Pro –∫—É—Ä—Å –ø–æ—Å—Ç—É–ø–æ–≤–æ üìò\n"
        f"–û—Å—å —Ç–≤–æ—î –ø–µ—Ä—à–µ –≤—ñ–¥–µ–æ ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—å —É–≤–∞–∂–Ω–æ, —ñ —è–∫ —Ç—ñ–ª—å–∫–∏ –∑–∞–∫—ñ–Ω—á–∏—à, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É \"‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ\". \n"
        f"–£—Å—å–æ–≥–æ –±—É–¥–µ 11 –≤—ñ–¥–µ–æ, —Ç–æ–∂ —Ä—É—Ö–∞—î–º–æ—Å—è –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º üö∂ üö∂\n"
        f"üìπ –í—ñ–¥–µ–æ 1: {PRO_COURSE_VIDEOS[0]}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ" –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ Pro –∫—É—Ä—Å–∞
async def next_pro_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle next pro video button press."""
    query = update.callback_query
    await query.answer()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    current_index = context.user_data.get("pro_video_index", 0)
    next_index = current_index + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
    if next_index >= len(PRO_COURSE_VIDEOS):
        await query.message.reply_text("–í—Å—ñ –≤—ñ–¥–µ–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
    context.user_data["pro_video_index"] = next_index
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üìπ –í—ñ–¥–µ–æ {next_index + 1}: {PRO_COURSE_VIDEOS[next_index]}\n\n"
        f"YouTube\n"
        f"–í—ñ–¥–µ–æ {next_index + 1}\n\n"
        f"#{next_index + 1}"
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
    if next_index < len(PRO_COURSE_VIDEOS) - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_pro_video")],
            [InlineKeyboardButton("üë®‚Äçüíº –¶—ñ–∫–∞–≤–∏—Ç—å —Å–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="request_contact")]
        ]
    else:  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
        context.user_data["return_to_pro_course"] = True
        
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüíº –¶—ñ–∫–∞–≤–∏—Ç—å —Å–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="request_contact")],
            [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")],
            [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    await query.message.reply_text(text, reply_markup=reply_markup)

# 13.1 –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def course_completed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle course completed button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
    context.user_data["return_to_basic_course"] = True
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        await query.message.reply_video(video=VIDEO_FILE_IDS["course_completed"])
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è Pro –∫—É—Ä—Å–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏ Pro –∫—É—Ä—Å", url=PRO_PAYMENT_LINK)],
            [InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="social_media")],
            [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")],
            [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        await query.message.reply_text(
            "üéØ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ ‚Äî —Ü–µ –∫—É—Ä—Å \"Pro\", –¥–µ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à:\n"
            "üîë –î–æ—Å—Ç—É–ø –¥–æ –¥–≤–æ—Ö —Å–∏—Å—Ç–µ–º —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤.\n"
            "üìä –ü—Ä—è–º—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏, –ø—ñ–¥–≤–∏—â–µ–Ω—ñ –∫–æ–º—ñ—Å—ñ—ó —Ç–∞ –ø—Ä–∞–≤–∏–ª–∞ —Ä–æ–±–æ—Ç–∏ –∑ —Å–∞–π—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤.\n"
            "üè® –°–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≥–æ—Ç–µ–ª—ñ–≤ (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É –∑ Booking).\n"
            "‚úàÔ∏è –°–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–≤—ñ–∞–∫–≤–∏—Ç–∫—ñ–≤.\n"
            "üíª –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø—ñ–¥–±–æ—Ä—É —Ç—É—Ä—É –∑ –±—É–¥—å-—è–∫–æ—ó —Ç–æ—á–∫–∏ —Å–≤—ñ—Ç—É.\n"
            "üöÄ –î–æ–¥–∞—Ç–∫–æ–≤–æ:\n"
            "üåü –†–æ–∑–≤–∏—Ç–æ–∫ –±—Ä–µ–Ω–¥—É.\n"
            "üì± –ó–∞—è–≤–∫–∏ —ñ–∑ —Å–æ—Ü–º–µ—Ä–µ–∂ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ.\n"
            "ü§ù –ü–æ—Å—Ç—ñ–π–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in course_completed: {e}")
        
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∏–¥–µ–æ, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç
        keyboard = [
            [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏ Pro –∫—É—Ä—Å", url=PRO_PAYMENT_LINK)],
            [InlineKeyboardButton("üì± –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="social_media")],
            [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")],
            [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="hotel_selection")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "üéØ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ ‚Äî —Ü–µ –∫—É—Ä—Å \"Pro\", –¥–µ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à:\n"
            "üîë –î–æ—Å—Ç—É–ø –¥–æ –¥–≤–æ—Ö —Å–∏—Å—Ç–µ–º —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤.\n"
            "üìä –ü—Ä—è–º—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏, –ø—ñ–¥–≤–∏—â–µ–Ω—ñ –∫–æ–º—ñ—Å—ñ—ó —Ç–∞ –ø—Ä–∞–≤–∏–ª–∞ —Ä–æ–±–æ—Ç–∏ –∑ —Å–∞–π—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤.\n"
            "üè® –°–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≥–æ—Ç–µ–ª—ñ–≤ (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É –∑ Booking).\n"
            "‚úàÔ∏è –°–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–≤—ñ–∞–∫–≤–∏—Ç–∫—ñ–≤.\n"
            "üíª –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø—ñ–¥–±–æ—Ä—É —Ç—É—Ä—É –∑ –±—É–¥—å-—è–∫–æ—ó —Ç–æ—á–∫–∏ —Å–≤—ñ—Ç—É.\n"
            "üöÄ –î–æ–¥–∞—Ç–∫–æ–≤–æ:\n"
            "üåü –†–æ–∑–≤–∏—Ç–æ–∫ –±—Ä–µ–Ω–¥—É.\n"
            "üì± –ó–∞—è–≤–∫–∏ —ñ–∑ —Å–æ—Ü–º–µ—Ä–µ–∂ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ.\n"
            "ü§ù –ü–æ—Å—Ç—ñ–π–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏.",
            reply_markup=reply_markup
        )

# 13.2 –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Pro –∫—É—Ä—Å–∞
async def pro_course_completed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle Pro course completed button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –æ—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
    context.user_data["return_to_pro_course"] = True
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º Pro –∫—É—Ä—Å–∞
    await query.message.reply_text(
        "üéâ –í—ñ—Ç–∞—î–º–æ –∑ —É—Å–ø—ñ—à–Ω–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º Pro –∫—É—Ä—Å—É!\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –º–∞—î—Ç–µ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–Ω–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –≤ —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ–º—É –±—ñ–∑–Ω–µ—Å—ñ.\n"
        "–ë–∞–∂–∞—î–º–æ –≤–µ–ª–∏–∫–∏—Ö —É—Å–ø—ñ—Ö—ñ–≤ —Ç–∞ –≤–∏—Å–æ–∫–∏—Ö –∫–æ–º—ñ—Å—ñ–π!",
        reply_markup=reply_markup
    )

# 14. –ö–Ω–æ–ø–∫–∞ "üéÅ –ï–∫—Å–∫–ª—é–∑–∏–≤ –¥–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤‚ú®"
async def i_am_agent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle exclusive for agents button press."""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    context.user_data["course_video_index"] = 0
    context.user_data["return_to_agent_info"] = True
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
    await send_course_video(update, context)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∫—É—Ä—Å–∞
async def send_course_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a course video based on the current index."""
    query = update.callback_query
    index = context.user_data.get("course_video_index", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
    if index >= len(COURSE_CIRCLE_VIDEO_IDS):
        await query.message.reply_text("–í—Å—ñ –≤—ñ–¥–µ–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ.")
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    try:
        await query.message.reply_video(
            video=COURSE_CIRCLE_VIDEO_IDS[index]
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
        if index < len(COURSE_CIRCLE_VIDEO_IDS) - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"),
                 InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ", callback_data="next_course_video")],
                [InlineKeyboardButton("üåü –ù–∞—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", url="https://datour.club/#partners")],
                [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")],
                [InlineKeyboardButton("üìú –î–æ–≥–æ–≤—ñ—Ä", callback_data="contract")],
                [InlineKeyboardButton("üë®‚Äçüíº –¶—ñ–∫–∞–≤–∏—Ç—å —Å–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="request_contact")]
            ]
        else:  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ - –∑–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ" –Ω–∞ "–ù–∞ –ø–æ—á–∞—Ç–æ–∫"
            keyboard = [
                [InlineKeyboardButton("‚è™ –ù–∞ –ø–æ—á–∞—Ç–æ–∫ ‚è™", callback_data="back_to_main")],
                [InlineKeyboardButton("üåü –ù–∞—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", url="https://datour.club/#partners")],
                [InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏ —Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤", callback_data="agent_testimonials")],
                [InlineKeyboardButton("üìú –î–æ–≥–æ–≤—ñ—Ä", callback_data="contract")],
                [InlineKeyboardButton("üë®‚Äçüíº –¶—ñ–∫–∞–≤–∏—Ç—å —Å–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="request_contact")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.reply_text(
            COURSE_CIRCLE_DESCRIPTIONS[index],
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error sending course video: {e}")
        await query.message.reply_text(
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ –∫—É—Ä—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ" –≤ –∫—É—Ä—Å–µ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
async def next_course_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle next course video button press."""
    query = update.callback_query
    await query.answer()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    current_index = context.user_data.get("course_video_index", 0)
    next_index = current_index + 1
    
    if next_index < len(COURSE_CIRCLE_VIDEO_IDS):
        context.user_data["course_video_index"] = next_index
        await send_course_video(update, context)
    else:
        await query.message.reply_text("–í—Å—ñ –≤—ñ–¥–µ–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ.")

# 15. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = [
        [InlineKeyboardButton("–°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="admin_show_all")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="admin_refresh")],
        [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="admin_hotel_stats")],
        [InlineKeyboardButton("üì£ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", callback_data="admin_broadcast")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users_data)}\n"
        f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return
    
    await query.answer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users_data()
    
    if query.data == "admin_show_all":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not users_data:
            await query.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 10
        page = context.user_data.get("admin_page", 0)
        total_pages = (len(users_data) - 1) // 10 + 1
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * 10
        end_idx = min(start_idx + 10, len(users_data))
        page_users = users_data[start_idx:end_idx]
        
        text = f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
        for i, user in enumerate(page_users, start=1):
            text += (f"{start_idx + i}. @{user['username']} | "
                    f"{user['phone']} | ID: {user['id']} | "
                    f"{user['timestamp']}\n\n")
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prev_page"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="admin_next_page"))
        
        keyboard = [nav_buttons, [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(text, reply_markup=reply_markup)
    
    elif query.data == "admin_stats":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º –∫—É—Ä—Å–æ–≤
        basic_users = sum(1 for user in users_data if user.get("course_type") == "basic")
        pro_users = sum(1 for user in users_data if user.get("course_type") == "pro")
        no_course_users = len(users_data) - basic_users - pro_users
        
        text += f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users_data)}\n"
        text += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–æ–≤–∏–º –∫—É—Ä—Å–æ–º: {basic_users}\n"
        text += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Pro –∫—É—Ä—Å–æ–º: {pro_users}\n"
        text += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∫—É—Ä—Å—ñ–≤: {no_course_users}\n\n"
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
        daily_stats = {}
        for user in users_data:
            date = user["timestamp"].split(" ")[0]
            daily_stats[date] = daily_stats.get(date, 0) + 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        text += "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ –¥–Ω—è—Ö:\n"
        for date, count in sorted(daily_stats.items(), reverse=True):
            text += f"{date}: {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(text, reply_markup=reply_markup)
    
    elif query.data == "admin_hotel_stats":
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø—Ä–æ—Å–∏–≤—à–∏—Ö –ø–æ–¥–±–æ—Ä –æ—Ç–µ–ª—è
        hotel_users = [user for user in users_data if user.get("action_type") == "hotel_selection"]
        
        if not hotel_users:
            text = "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ –ø—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é."
        else:
            text = f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ –ø—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é ({len(hotel_users)}):\n\n"
            for i, user in enumerate(hotel_users, start=1):
                text += (f"{i}. @{user['username']} | "
                        f"{user['phone']} | ID: {user['id']} | "
                        f"{user['timestamp']}\n\n")
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(text, reply_markup=reply_markup)
    
    elif query.data == "admin_refresh":
        # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        keyboard = [
            [InlineKeyboardButton("–°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="admin_show_all")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="admin_refresh")],
            [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="admin_hotel_stats")],
            [InlineKeyboardButton("üì£ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", callback_data="admin_broadcast")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users_data)}\n"
            f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=reply_markup
        )
    
    elif query.data == "admin_prev_page":
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        context.user_data["admin_page"] = max(0, context.user_data.get("admin_page", 0) - 1)
        # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–æ–≤–∞
        query.data = "admin_show_all"
        await admin_buttons(update, context)
    
    elif query.data == "admin_next_page":
        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages = (len(users_data) - 1) // 10 + 1
        context.user_data["admin_page"] = min(total_pages - 1, context.user_data.get("admin_page", 0) + 1)
        # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–æ–≤–∞
        query.data = "admin_show_all"
        await admin_buttons(update, context)
    
    elif query.data == "admin_back":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        context.user_data["admin_page"] = 0
        keyboard = [
            [InlineKeyboardButton("–°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data="admin_show_all")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="admin_refresh")],
            [InlineKeyboardButton("üè® –ü—ñ–¥–±—ñ—Ä –≥–æ—Ç–µ–ª—é", callback_data="admin_hotel_stats")],
            [InlineKeyboardButton("üì£ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", callback_data="admin_broadcast")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users_data)}\n"
            f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=reply_markup
        )
    
    elif query.data == "admin_broadcast":
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        await start_broadcast(update, context)

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    query = update.callback_query
    if query:
        await query.answer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    users_data = load_users_data()
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º –∫—É—Ä—Å–æ–≤
    basic_users = sum(1 for user in users_data if user.get("course_type") == "basic")
    pro_users = sum(1 for user in users_data if user.get("course_type") == "pro")
    no_course_users = len(users_data) - basic_users - pro_users
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    keyboard = [
        [InlineKeyboardButton(f"–ë–∞–∑–æ–≤–∏–π –∫—É—Ä—Å ({basic_users})", callback_data="target_basic")],
        [InlineKeyboardButton(f"Pro –∫—É—Ä—Å ({pro_users})", callback_data="target_pro")],
        [InlineKeyboardButton(f"–ë–µ–∑ –∫—É—Ä—Å—ñ–≤ ({no_course_users})", callback_data="target_none")],
        [InlineKeyboardButton(f"–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ ({len(users_data)})", callback_data="target_all")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="broadcast_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ –∏–∑ callback, –∏–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if query:
        await query.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=reply_markup
        )
    else:  # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
        await update.message.reply_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=reply_markup
        )
    
    return BROADCAST_TARGET

async def broadcast_target_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    target_data = query.data.replace("target_", "")
    context.user_data["broadcast_target"] = target_data
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    target_text = {
        "basic": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–æ–≤–∏–º –∫—É—Ä—Å–æ–º",
        "pro": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Pro –∫—É—Ä—Å–æ–º",
        "none": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∫—É—Ä—Å—ñ–≤",
        "all": "–≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    }.get(target_data, "–æ–±—Ä–∞–Ω—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="content_type_text")],
        [InlineKeyboardButton("üñº –§–æ—Ç–æ", callback_data="content_type_photo")],
        [InlineKeyboardButton("üé¨ –í—ñ–¥–µ–æ", callback_data="content_type_video")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="broadcast_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        f"–û–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è: {target_text}\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
        reply_markup=reply_markup
    )
    
    return BROADCAST_CONTENT_TYPE

async def broadcast_content_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    content_type = query.data.replace("content_type_", "")
    context.user_data["broadcast_content_type"] = content_type
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if content_type == "text":
        await query.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n"
            "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å /cancel"
        )
        return BROADCAST_TEXT
    
    elif content_type == "photo":
        await query.message.edit_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n"
            "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å /cancel"
        )
        return BROADCAST_PHOTO
    
    elif content_type == "video":
        await query.message.edit_text(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n"
            "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å /cancel"
        )
        return BROADCAST_VIDEO
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ—Ç–º–µ–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await query.message.edit_text("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É. –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def broadcast_text_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    message_text = update.message.text
    context.user_data["broadcast_text"] = message_text
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    target_data = context.user_data.get("broadcast_target", "all")
    target_text = {
        "basic": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–æ–≤–∏–º –∫—É—Ä—Å–æ–º",
        "pro": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Pro –∫—É—Ä—Å–æ–º",
        "none": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∫—É—Ä—Å—ñ–≤",
        "all": "–≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    }.get(target_data, "–æ–±—Ä–∞–Ω—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="broadcast_confirm")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="broadcast_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è {target_text}:\n\n"
        f"{message_text}\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É:",
        reply_markup=reply_markup
    )
    
    return BROADCAST_CONFIRM

async def broadcast_photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    photo = update.message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
    caption = update.message.caption or ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["broadcast_photo_id"] = photo.file_id
    context.user_data["broadcast_caption"] = caption
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    target_data = context.user_data.get("broadcast_target", "all")
    target_text = {
        "basic": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–æ–≤–∏–º –∫—É—Ä—Å–æ–º",
        "pro": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Pro –∫—É—Ä—Å–æ–º",
        "none": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∫—É—Ä—Å—ñ–≤",
        "all": "–≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    }.get(target_data, "–æ–±—Ä–∞–Ω—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="broadcast_confirm")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="broadcast_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await update.message.reply_photo(
        photo=photo.file_id,
        caption=f"–§–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è {target_text} –∑ –ø—ñ–¥–ø–∏—Å–æ–º:\n\n{caption}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É:",
        reply_markup=reply_markup
    )
    
    return BROADCAST_CONFIRM

async def broadcast_video_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    video = update.message.video
    caption = update.message.caption or ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["broadcast_video_id"] = video.file_id
    context.user_data["broadcast_caption"] = caption
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    target_data = context.user_data.get("broadcast_target", "all")
    target_text = {
        "basic": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–æ–≤–∏–º –∫—É—Ä—Å–æ–º",
        "pro": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Pro –∫—É—Ä—Å–æ–º",
        "none": "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∫—É—Ä—Å—ñ–≤",
        "all": "–≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    }.get(target_data, "–æ–±—Ä–∞–Ω—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="broadcast_confirm")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="broadcast_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await update.message.reply_video(
        video=video.file_id,
        caption=f"–í—ñ–¥–µ–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è {target_text} –∑ –ø—ñ–¥–ø–∏—Å–æ–º:\n\n{caption}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É:",
        reply_markup=reply_markup
    )
    
    return BROADCAST_CONFIRM

async def broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    target_data = context.user_data.get("broadcast_target", "all")
    content_type = context.user_data.get("broadcast_content_type", "text")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users_data()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if target_data == "basic":
        recipients = [user for user in users_data if user.get("course_type") == "basic"]
    elif target_data == "pro":
        recipients = [user for user in users_data if user.get("course_type") == "pro"]
    elif target_data == "none":
        recipients = [user for user in users_data if not user.get("course_type")]
    else:  # all
        recipients = users_data
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = [
        [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="broadcast_cancel_confirm")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await query.message.edit_text(
        f"–£–≤–∞–≥–∞! –†–æ–∑—Å–∏–ª–∫–∞ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(recipients)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n\n"
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?\n\n"
        "–í–∏ –∑–º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—Ü–µ—Å—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É'.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="continue_broadcast")],
            [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="broadcast_cancel_confirm")]
        ])
    )
    
    return BROADCAST_CONFIRM

async def continue_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    
    target_data = context.user_data.get("broadcast_target", "all")
    content_type = context.user_data.get("broadcast_content_type", "text")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_data = load_users_data()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if target_data == "basic":
        recipients = [user for user in users_data if user.get("course_type") == "basic"]
    elif target_data == "pro":
        recipients = [user for user in users_data if user.get("course_type") == "pro"]
    elif target_data == "none":
        recipients = [user for user in users_data if not user.get("course_type")]
    else:  # all
        recipients = users_data
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = [
        [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É", callback_data="broadcast_cancel_confirm")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    status_message = await query.message.edit_text(
        "–†–æ–∑—Å–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ...\n"
        "0% –≤–∏–∫–æ–Ω–∞–Ω–æ (0/%d)\n\n"
        "‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
        "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏: 0\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:" % len(recipients),
        reply_markup=reply_markup
    )
    
    # –§–ª–∞–≥ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data["broadcast_cancelled"] = False
    
    # –°—á–µ—Ç—á–∏–∫–∏
    sent_count = 0
    failed_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, user in enumerate(recipients):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
        if context.user_data.get("broadcast_cancelled"):
            skipped_count = len(recipients) - i
            await status_message.edit_text(
                f"–†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º!\n\n"
                f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏: {failed_count}\n"
                f"‚è∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_back")
                ]])
            )
            return ConversationHandler.END
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if content_type == "text":
                broadcast_text = context.user_data.get("broadcast_text", "")
                await context.bot.send_message(
                    chat_id=user["id"],
                    text=broadcast_text
                )
            elif content_type == "photo":
                photo_id = context.user_data.get("broadcast_photo_id", "")
                caption = context.user_data.get("broadcast_caption", "")
                await context.bot.send_photo(
                    chat_id=user["id"],
                    photo=photo_id,
                    caption=caption
                )
            elif content_type == "video":
                video_id = context.user_data.get("broadcast_video_id", "")
                caption = context.user_data.get("broadcast_caption", "")
                await context.bot.send_video(
                    chat_id=user["id"],
                    video=video_id,
                    caption=caption
                )
            
            sent_count += 1
        except Exception as e:
            logger.error(f"Error sending broadcast to user {user['id']}: {e}")
            failed_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        if (i + 1) % 5 == 0 or i + 1 == len(recipients):
            progress = ((i + 1) / len(recipients) * 100)
            await status_message.edit_text(
                f"–†–æ–∑—Å–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ...\n"
                f"{progress:.1f}% –≤–∏–∫–æ–Ω–∞–Ω–æ ({i+1}/{len(recipients)})\n\n"
                f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏: {failed_count}\n\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
                reply_markup=reply_markup
            )
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await status_message.edit_text(
        f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏: {failed_count}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    
    return ConversationHandler.END

async def broadcast_cancel_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É."""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data["broadcast_cancelled"] = True
    
    await query.message.edit_text(
        "–†–æ–∑—Å–∏–ª–∫–∞ –±—É–¥–µ —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
    )
    
    return ConversationHandler.END

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data.pop("broadcast_target", None)
    context.user_data.pop("broadcast_content_type", None)
    context.user_data.pop("broadcast_text", None)
    context.user_data.pop("broadcast_photo_id", None)
    context.user_data.pop("broadcast_video_id", None)
    context.user_data.pop("broadcast_caption", None)
    
    await query.message.edit_text(
        "–†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    return await start_broadcast(update, context)

# 16. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
async def social_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle social media button press."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("Instagram", url="instagram.com/kozlovsky_official"),
         InlineKeyboardButton("YouTube", url="https://www.youtube.com/@Enjoy-World")],
        [InlineKeyboardButton("Telegram", url="t.me/EnjoybyAK"),
         InlineKeyboardButton("Viber", url="https://invite.viber.com/?g2=AQAdFXxYRdaujUjJrDmLqBUV0euxHSLFrEj34LGtzWmFdIZ8fq7avy%2FjLrlTBiNv&lang=ru")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="more_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üì± –ù–∞—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:\n"
        "–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω",
        reply_markup=reply_markup
    )

# 17. –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def request_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    user_id = query.from_user.id
    username = query.from_user.username
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_user_data(user_id, username, "–ù–µ —É–∫–∞–∑–∞–Ω", timestamp, "request_contact")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    context.user_data["next_url"] = "https://t.me/kozlovsky_official2"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await query.message.reply_text(
        "–î–ª—è –∑–≤'—è–∑–∫—É –∑ –Ω–∞—à–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É. \n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )
    
    return PHONE

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ—Ç–µ–ª—è
async def hotel_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    user_id = query.from_user.id
    username = query.from_user.username
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_user_data(user_id, username, "–ù–µ —É–∫–∞–∑–∞–Ω", timestamp, "hotel_selection")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    context.user_data["next_url"] = "https://t.me/kozlovsky_official"
    context.user_data["action_type"] = "hotel_selection"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await query.message.reply_text(
        "–î–ª—è –∑–≤'—è–∑–∫—É –∑ –ê—Ä—Ç–µ–º–æ–º —â–æ–¥–æ –ø—ñ–¥–±–æ—Ä—É –≥–æ—Ç–µ–ª—é, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É. \n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )
    
    return PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def process_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
    user = update.message.from_user
    phone_number = update.message.contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    action_type = context.user_data.get("action_type", None)
    save_user_data(user.id, user.username, phone_number, timestamp, action_type)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    if action_type == "hotel_selection":
        message_text = "–î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ó–∞—Ä–∞–∑ –≤–∏ –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–æ –ê—Ä—Ç–µ–º–∞ –ö–æ–∑–ª–æ–≤—Å—å–∫–æ–≥–æ"
        button_text = "üìû –ó–≤'—è–∑–æ–∫ –∑ –ê—Ä—Ç–µ–º–æ–º"
    else:
        message_text = "–î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ó–∞—Ä–∞–∑ –≤–∏ –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–æ –Ω–∞—à–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞."
        button_text = "üë®‚Äçüíº –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞"
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
    await update.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(button_text, url=context.user_data.get("next_url", "https://t.me/kozlovsky_official"))
        ]])
    )
    
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    await update.message.reply_text(
        "–ü—Ä–æ—Ü–µ—Å –∑–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üë®‚Äçüíº –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞", url=context.user_data.get("next_url", "https://t.me/kozlovsky_official"))
        ]])
    )
    
    return ConversationHandler.END

# 18. –û—Ç–∑—ã–≤—ã —Ç—É—Ä–∞–≥–µ–Ω—Ç–æ–≤
async def agent_testimonials(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle agent testimonials button press."""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–æ–≤ –≤ 0
    context.user_data["agent_testimonial_index"] = 0
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if query.data == "agent_testimonials":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if context.user_data.get("return_to_full_course"):
            context.user_data["source"] = "basic_course"
        elif context.user_data.get("return_to_pro_full_course") or context.user_data.get("return_to_pro_course"):
            context.user_data["source"] = "pro_course"
        elif context.user_data.get("return_to_agent_info"):
            context.user_data["source"] = "agent_info"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await query.message.reply_text("üí¨ –í—ñ–¥–≥—É–∫–∏ –≤—ñ–¥ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤-—Ç—É—Ä–∞–≥–µ–Ω—Ç—ñ–≤:")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
    await send_agent_testimonial(update, context)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞
async def send_agent_testimonial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send agent testimonial video based on the current index."""
    query = update.callback_query
    index = context.user_data.get("agent_testimonial_index", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
    if index >= len(AGENT_TESTIMONIAL_VIDEO_IDS):
        await query.message.reply_text(
            "–í—Å—ñ –≤—ñ–¥–≥—É–∫–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data="back_to_source")
            ]])
        )
        return
    
    videos = AGENT_TESTIMONIAL_VIDEO_IDS[index]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –æ—Ç–∑—ã–≤–∞
    for i, video_id in enumerate(videos):
        try:
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if i == len(videos) - 1:
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ –æ—Ç–∑—ã–≤–∞
                if index < len(AGENT_TESTIMONIAL_VIDEO_IDS) - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤
                    keyboard = [
                        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–¥–≥—É–∫", callback_data="next_agent_testimonial")],
                        [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data="back_to_source")]
                    ]
                else:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤
                    keyboard = [
                        [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data="back_to_source")]
                    ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.reply_video(video=video_id, reply_markup=reply_markup)
            else:
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                await query.message.reply_video(video=video_id)
        except Exception as e:
            logger.error(f"Error sending agent testimonial video: {e}")
            await query.message.reply_text(
                f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–µ–æ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é."
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ —Ç—É—Ä–∞–≥–µ–Ω—Ç–∞"
async def next_agent_testimonial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle next agent testimonial button press."""
    query = update.callback_query
    await query.answer()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞
    current_index = context.user_data.get("agent_testimonial_index", 0)
    next_index = current_index + 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    context.user_data["agent_testimonial_index"] = next_index
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤
    await send_agent_testimonial(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
async def back_to_source(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    source = context.user_data.get("source", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if source == "basic_course" and context.user_data.get("return_to_full_course"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–ª–Ω–æ–º—É –∫—É—Ä—Å—É
        await full_course(update, context)
    elif source == "pro_course" and context.user_data.get("return_to_pro_full_course"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–ª–Ω–æ–º—É Pro –∫—É—Ä—Å—É
        await pro_full_course(update, context)
    elif source == "agent_info" and context.user_data.get("return_to_agent_info"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        await i_am_agent(update, context)
    else:
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        await back_to_main(update, context)

# 19. –ö–Ω–æ–ø–∫–∞ "üìú –î–æ–≥–æ–≤—ñ—Ä"
async def contract(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle contract button press."""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    for doc_id in CONTRACT_DOCUMENT_IDS:
        try:
            await query.message.reply_document(document=doc_id)
        except Exception as e:
            logger.error(f"Error sending contract document: {e}")
            await query.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ i_am_agent
    keyboard = [[InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data="i_am_agent")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text("–í–∏—â–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä—É.", reply_markup=reply_markup)

# 20. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle text messages."""
    text = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    if "–æ–ø–ª–∞—Ç–∞" in text and "—É—Å–ø—ñ—à–Ω" in text:
        await payment_success(update, context)
    else:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        await update.message.reply_text("AI –∞—Å–∏—Å—Ç–µ–Ω—Ç —É —Ä–æ–∑—Ä–æ–±—Ü—ñ")

# 21. –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle back to main button press."""
    query = update.callback_query
    await query.answer()
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é start —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    await start(update, context, is_callback=True)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(request_contact, pattern="^request_contact$"),
            CallbackQueryHandler(hotel_selection, pattern="^hotel_selection$")
        ],
        states={
            PHONE: [MessageHandler(filters.CONTACT, process_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    broadcast_handler = ConversationHandler(
        entry_points=[
            CommandHandler("broadcast", broadcast_command),
            CallbackQueryHandler(start_broadcast, pattern="^admin_broadcast$")
        ],
        states={
            BROADCAST_TARGET: [
                CallbackQueryHandler(broadcast_target_selected, pattern="^target_"),
                CallbackQueryHandler(broadcast_cancel, pattern="^broadcast_cancel$")
            ],
            BROADCAST_CONTENT_TYPE: [
                CallbackQueryHandler(broadcast_content_type_selected, pattern="^content_type_"),
                CallbackQueryHandler(broadcast_cancel, pattern="^broadcast_cancel$")
            ],
            BROADCAST_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_text_received)
            ],
            BROADCAST_PHOTO: [
                MessageHandler(filters.PHOTO, broadcast_photo_received)
            ],
            BROADCAST_VIDEO: [
                MessageHandler(filters.VIDEO, broadcast_video_received)
            ],
            BROADCAST_CONFIRM: [
                CallbackQueryHandler(broadcast_confirm, pattern="^broadcast_confirm$"),
                CallbackQueryHandler(continue_broadcast, pattern="^continue_broadcast$"),
                CallbackQueryHandler(broadcast_cancel, pattern="^broadcast_cancel$"),
                CallbackQueryHandler(broadcast_cancel_confirmation, pattern="^broadcast_cancel_confirm$")
            ],
        },
        fallbacks=[CommandHandler("cancel", broadcast_cancel)],
    )
    
    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    
    # Add callback query handlers
    application.add_handler(CallbackQueryHandler(more_info, pattern="^more_info$"))
    application.add_handler(CallbackQueryHandler(training_info, pattern="^training_info$"))
    application.add_handler(CallbackQueryHandler(documents, pattern="^documents$"))
    application.add_handler(CallbackQueryHandler(testimonials, pattern="^testimonials$"))
    application.add_handler(CallbackQueryHandler(social_media, pattern="^social_media$"))
    
    # Add handlers for agent testimonials and contract
    application.add_handler(CallbackQueryHandler(agent_testimonials, pattern="^agent_testimonials$"))
    application.add_handler(CallbackQueryHandler(next_agent_testimonial, pattern="^next_agent_testimonial$"))
    application.add_handler(CallbackQueryHandler(back_to_source, pattern="^back_to_source$"))
    application.add_handler(CallbackQueryHandler(contract, pattern="^contract$"))
    
    # Add handler for back to main
    application.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ callback_data
    application.add_handler(CallbackQueryHandler(testimonial_1, pattern="^testimonial_1$"))
    application.add_handler(CallbackQueryHandler(testimonial_2, pattern="^testimonial_2$"))
    application.add_handler(CallbackQueryHandler(testimonial_3, pattern="^testimonial_3$"))
    application.add_handler(CallbackQueryHandler(testimonial_4, pattern="^testimonial_4$"))
    application.add_handler(CallbackQueryHandler(testimonial_5, pattern="^testimonial_5$"))
    application.add_handler(CallbackQueryHandler(testimonial_6, pattern="^testimonial_6$"))
    application.add_handler(CallbackQueryHandler(testimonial_7, pattern="^testimonial_7$"))
    
    # Admin panel handlers
    application.add_handler(CallbackQueryHandler(admin_buttons, pattern="^admin_"))
    
    # Course handlers
    application.add_handler(CallbackQueryHandler(full_course, pattern="^full_course$"))
    application.add_handler(CallbackQueryHandler(pro_full_course, pattern="^pro_full_course$"))
    application.add_handler(CallbackQueryHandler(gradual_course, pattern="^gradual_course$"))
    application.add_handler(CallbackQueryHandler(pro_gradual_course, pattern="^pro_gradual_course$"))
    application.add_handler(CallbackQueryHandler(next_video, pattern="^next_video$"))
    application.add_handler(CallbackQueryHandler(next_pro_video, pattern="^next_pro_video$"))
    application.add_handler(CallbackQueryHandler(ask_question, pattern="^ask_question$"))
    application.add_handler(CallbackQueryHandler(course_completed, pattern="^course_completed$"))
    application.add_handler(CallbackQueryHandler(pro_course_completed, pattern="^pro_course_completed$"))
    application.add_handler(CallbackQueryHandler(i_am_agent, pattern="^i_am_agent$"))
    application.add_handler(CallbackQueryHandler(next_agent_video, pattern="^next_agent_video$"))
    application.add_handler(CallbackQueryHandler(about_course, pattern="^about_course$"))
    application.add_handler(CallbackQueryHandler(next_course_video, pattern="^next_course_video$"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(broadcast_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback_data, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π
    application.add_handler(CallbackQueryHandler(broadcast_target_selected, pattern="^target_"))
    application.add_handler(CallbackQueryHandler(broadcast_cancel, pattern="^broadcast_cancel$"))
    application.add_handler(CallbackQueryHandler(broadcast_content_type_selected, pattern="^content_type_"))
    application.add_handler(CallbackQueryHandler(broadcast_confirm, pattern="^broadcast_confirm$"))
    application.add_handler(CallbackQueryHandler(continue_broadcast, pattern="^continue_broadcast$"))
    application.add_handler(CallbackQueryHandler(broadcast_cancel_confirmation, pattern="^broadcast_cancel_confirm$"))
    
    # Add message handler for text messages
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Run the bot until the user presses Ctrl-C
    application.run_polling()

if __name__ == "__main__":
    main()